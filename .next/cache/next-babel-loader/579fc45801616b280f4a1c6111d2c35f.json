{"ast":null,"code":"import connectDb from '../../utils/connectDb';\nimport User from '../../models/User';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport isEmail from 'validator/lib/isEmail';\nimport isLength from 'validator/lib/isLength';\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n\n  try {\n    //validate name(3-10 characters), email and password\n    if (!isLength(name, {\n      min: 3,\n      max: 10\n    })) {\n      return res.status(422).send(\"Name must be 3-10 characters long\");\n    } else if (!isLength(password, {\n      min: 6,\n      max: 15\n    })) {\n      return res.status(522).send(\"Password length should be between 6-15 characters\");\n    } else if (!isEmail(email)) {\n      return res.status(422).send(\"Email must be valid\");\n    } //check if user already exists\n\n\n    const user = await User.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(422).send(`user already exists with email ${email}`);\n    } //if not- hash password\n\n\n    const hash = await bcrypt.hash(password, 10); //create user\n\n    const newUser = await new User({\n      name,\n      email,\n      password: hash\n    }).save(); //console.log({newUser})\n    //create token for new user\n\n    const token = jwt.sign({\n      userId: newUser._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: '7d'\n    }); //send back token\n\n    res.status(201).json(token);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error in signing up. Please try again\");\n  }\n});","map":{"version":3,"sources":["/home/enzyme/Desktop/react/profile-app-send (1)/pages/api/signup.js"],"names":["connectDb","User","bcrypt","jwt","isEmail","isLength","req","res","name","email","password","body","min","max","status","send","user","findOne","hash","newUser","save","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","json","error","console"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAEAL,SAAS;AAET,gBAAe,OAAOM,GAAP,EAAWC,GAAX,KAAkB;AAC7B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA4BJ,GAAG,CAACK,IAAtC;;AACA,MAAG;AACC;AACA,QAAG,CAACN,QAAQ,CAACG,IAAD,EAAO;AAAEI,MAAAA,GAAG,EAAC,CAAN;AAASC,MAAAA,GAAG,EAAE;AAAd,KAAP,CAAZ,EAAuC;AACnC,aAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mCAArB,CAAP;AACH,KAFD,MAEM,IAAG,CAACV,QAAQ,CAACK,QAAD,EAAW;AAAEE,MAAAA,GAAG,EAAC,CAAN;AAAUC,MAAAA,GAAG,EAAC;AAAd,KAAX,CAAZ,EAA4C;AAC9C,aAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mDAArB,CAAP;AACH,KAFK,MAEA,IAAG,CAACX,OAAO,CAACK,KAAD,CAAX,EAAoB;AACtB,aAAOF,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAArB,CAAP;AACH,KARF,CAUC;;;AACA,UAAMC,IAAI,GAAG,MAAMf,IAAI,CAACgB,OAAL,CAAa;AAAER,MAAAA;AAAF,KAAb,CAAnB;;AACA,QAAGO,IAAH,EAAS;AACL,aAAOT,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,kCAAiCN,KAAM,EAA7D,CAAP;AACH,KAdF,CAeC;;;AACA,UAAMS,IAAI,GAAG,MAAMhB,MAAM,CAACgB,IAAP,CAAYR,QAAZ,EAAsB,EAAtB,CAAnB,CAhBD,CAiBC;;AACA,UAAMS,OAAO,GAAG,MAAM,IAAIlB,IAAJ,CAAS;AAC3BO,MAAAA,IAD2B;AAE3BC,MAAAA,KAF2B;AAG3BC,MAAAA,QAAQ,EAAEQ;AAHiB,KAAT,EAInBE,IAJmB,EAAtB,CAlBD,CAuBC;AACA;;AACA,UAAMC,KAAK,GAAGlB,GAAG,CAACmB,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAEJ,OAAO,CAACK;AAAlB,KAAT,EAAkCC,OAAO,CAACC,GAAR,CAAYC,UAA9C,EAA0D;AACpEC,MAAAA,SAAS,EAAE;AADyD,KAA1D,CAAd,CAzBD,CA4BC;;AACArB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBe,IAAhB,CAAqBR,KAArB;AACH,GA9BD,CA8BC,OAAOS,KAAP,EAAc;AACXC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAvB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uCAArB;AACH;AACJ,CApCD","sourcesContent":["import connectDb from '../../utils/connectDb'\nimport User from '../../models/User'\nimport bcrypt from 'bcrypt'\nimport jwt from 'jsonwebtoken'\nimport isEmail from 'validator/lib/isEmail'\nimport isLength from 'validator/lib/isLength'\n\nconnectDb()\n\nexport default async (req,res)=> {\n    const { name, email, password } = req.body\n    try{\n        //validate name(3-10 characters), email and password\n        if(!isLength(name, { min:3, max: 10})) {\n            return res.status(422).send(\"Name must be 3-10 characters long\")\n        }else if(!isLength(password, { min:6 , max:15 })) {\n            return res.status(522).send(\"Password length should be between 6-15 characters\")\n        }else if(!isEmail(email)) {\n            return res.status(422).send(\"Email must be valid\")\n        }\n\n        //check if user already exists\n        const user = await User.findOne({ email })\n        if(user) {\n            return res.status(422).send(`user already exists with email ${email}`)\n        }\n        //if not- hash password\n        const hash = await bcrypt.hash(password, 10)\n        //create user\n        const newUser = await new User({\n            name,\n            email,\n            password: hash\n        }).save()\n        //console.log({newUser})\n        //create token for new user\n        const token = jwt.sign({ userId: newUser._id }, process.env.JWT_SECRET, {\n            expiresIn: '7d'\n        })\n        //send back token\n        res.status(201).json(token)\n    }catch (error) {\n        console.error(error)\n        res.status(500).send(\"Error in signing up. Please try again\")\n    }\n}"]},"metadata":{},"sourceType":"module"}