{"ast":null,"code":"import connectDb from '../../utils/connectDb';\nimport User from '../../models/User';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    //check if user exists with valid email\n    const user = await User.findOne({\n      email\n    }).select('+password');\n\n    if (!user) {\n      return res.status(404).send(\"No user exist with that email\");\n    } //if users password is correct- yes - generate token\n\n\n    const passwordsMatch = await bcrypt.compare(password, user.password);\n\n    if (passwordsMatch) {\n      const token = jwt.sign({\n        userId: user._id\n      }, process.env.JWT_SECRET, {\n        expiresIn: '7d'\n      });\n      res.status(200).json(token);\n    } else {\n      res.status(401).send(\"Passwords do not match\");\n    } //if not -error\n\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error logging in user \");\n  }\n});","map":{"version":3,"sources":["/home/enzyme/Desktop/Profile-App-React/pages/api/login.js"],"names":["connectDb","User","bcrypt","jwt","req","res","email","password","body","user","findOne","select","status","send","passwordsMatch","compare","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","json","error","console"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEAH,SAAS;AAET,gBAAe,OAAOI,GAAP,EAAWC,GAAX,KAAkB;AAC7B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,GAAG,CAACI,IAAhC;;AACA,MAAG;AACC;AACA,UAAMC,IAAI,GAAG,MAAMR,IAAI,CAACS,OAAL,CAAa;AAAEJ,MAAAA;AAAF,KAAb,EAAwBK,MAAxB,CAA+B,WAA/B,CAAnB;;AACA,QAAG,CAACF,IAAJ,EAAU;AACN,aAAOJ,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,+BAArB,CAAP;AACH,KALF,CAMC;;;AACA,UAAMC,cAAc,GAAG,MAAMZ,MAAM,CAACa,OAAP,CAAeR,QAAf,EAAyBE,IAAI,CAACF,QAA9B,CAA7B;;AACA,QAAGO,cAAH,EAAmB;AACf,YAAME,KAAK,GAAGb,GAAG,CAACc,IAAJ,CAAS;AAAEC,QAAAA,MAAM,EAAET,IAAI,CAACU;AAAf,OAAT,EAA+BC,OAAO,CAACC,GAAR,CAAYC,UAA3C,EAAuD;AACjEC,QAAAA,SAAS,EAAE;AADsD,OAAvD,CAAd;AAGAlB,MAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBY,IAAhB,CAAqBR,KAArB;AACH,KALD,MAKM;AACFX,MAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAArB;AACH,KAfF,CAgBC;;AACH,GAjBD,CAiBC,OAAOY,KAAP,EAAc;AACXC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACApB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAArB;AACH;AACJ,CAvBD","sourcesContent":["import connectDb from '../../utils/connectDb'\nimport User from '../../models/User'\nimport bcrypt from 'bcrypt'\nimport jwt from 'jsonwebtoken'\n\nconnectDb()\n\nexport default async (req,res)=> {\n    const { email, password } = req.body\n    try{\n        //check if user exists with valid email\n        const user = await User.findOne({ email }).select('+password')\n        if(!user) {\n            return res.status(404).send(\"No user exist with that email\")\n        }\n        //if users password is correct- yes - generate token\n        const passwordsMatch = await bcrypt.compare(password, user.password)\n        if(passwordsMatch) {\n            const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {\n                expiresIn: '7d'\n            })\n            res.status(200).json(token)\n        }else {\n            res.status(401).send(\"Passwords do not match\")\n        }\n        //if not -error\n    }catch (error) {\n        console.error(error)\n        res.status(500).send(\"Error logging in user \")\n    }\n}"]},"metadata":{},"sourceType":"module"}